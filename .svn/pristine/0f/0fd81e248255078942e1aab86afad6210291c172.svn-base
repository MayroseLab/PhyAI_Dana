import sys
sys.path.append("/groups/itay_mayrose/danaazouri/PhyAI/code/")
import warnings
warnings.filterwarnings("ignore")			# TEMP
import itertools
import seaborn as sns

from defs import *
N_FEATURES_COL = "n_features"

sns.set_style("white")
palette = itertools.cycle(sns.color_palette('colorblind'))

import matplotlib.gridspec as gridspec


def plot_main_results(df):
	f = plt.figure()
	gs0 = gridspec.GridSpec(1, 3)
	gs00 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=gs0[0])
	gs01 = gridspec.GridSpecFromSubplotSpec(1, 2, subplot_spec=gs0[1])
	gs02 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=gs0[2])
	
	ax1, ax2, ax3, ax4 = f.add_subplot(gs00[:]), f.add_subplot(gs01[:,:1]), f.add_subplot(gs01[:,1:2]),f.add_subplot(gs02[:])
	
	#ylims = [(0, 1), (1, 100), (1, 100), (0, 50)]
	axes = [ax1,ax2,ax3,ax4]
	for i,ax in enumerate(axes):
		sns.violinplot(y=SCORES_LST[i], data=df, ax=ax, color=next(palette))
		#ax.set_ylim(ylims[i])
	
	
	ax1.set(xlabel="Spearman correlation", ylabel="Score (0 to 1)")
	ax2.set(xlabel="Best predicted\nranking", ylabel="Score (1 to 100)")
	ax3.set(xlabel="Empirically best\nranking", ylabel="")
	ax4.set(xlabel="Required evaluation set", ylabel="Score (0% to 100%)")
	
	#for i,ax in enumerate(axes):
	#	ax.set_xticklabels(ax.get_xticklabels(), size=30)
	#	ax.set_yticklabels(ax.get_yticklabels(), size=30)
	
	f.tight_layout()
	plt.show()
	#plt.savefig(dirpath + "results.png")


def scores_feature_selection(df):
	fig, axarr = plt.subplots(2, 2)
	axarrs_locs = [(0, 0), (0, 1), (1, 0), (1, 1)]
	ylims = [(0.5, 1), (1, 30), (1, 30), (0, 40)]
	for i,loc in enumerate(axarrs_locs):
		color = next(palette)
		ax = axarr[axarrs_locs[i]]
		ax.set_ylim(ylims[i])
		sns.boxplot(x=N_FEATURES_COL, y=SCORES_LST[i], data=df, ax=ax, color=color)
		ax.set_xticklabels(ax.get_xticklabels(), rotation=30)
		
	fig.tight_layout()
	plt.show()
	#plt.savefig(dirpath + "feature_selection_scores_comparison.png")


def concat_n_features(dirpath, max_n_features):
	'''
	pre-merge iterations results to one csv with "n_features" col
	'''
	df = pd.read_csv(dirpath + SCORES_PER_DS.format(str(max_n_features) + "_1"))
	df[N_FEATURES_COL] = max_n_features
	for i in range(max_n_features-1,0,-1):
		csv = dirpath + SCORES_PER_DS.format(str(i) + "_1")
		if not os.path.exists(csv):
			break
		df2 = pd.read_csv(csv)
		df2[N_FEATURES_COL] = i
		df = pd.concat([df,df2])

	return df


	


if __name__ == '__main__':
	dirpath = SUMMARY_FILES_DIR if platform.system() == 'Linux' else DATA_PATH
	#df = concat_n_features(dirpath, max_n_features=28)
	#scores_feature_selection(df)
	
	df = pd.read_csv(dirpath + SCORES_PER_DS.format("28_1_ytransformed_exp"))
	plot_main_results(df)
	